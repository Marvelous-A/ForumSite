Листинг Б.1 - Модуль manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SettingsForum.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

Листинг Б.2 - Модуль admin.py
from django.contrib import admin
from forum.models import *
from django.contrib.admin import ModelAdmin

# Register your models here.

class MessageView(ModelAdmin):
    list_display = ['author', 'question', 'text', 'image']
    search_fields = ['text']
    empty_value_display = 'Не задано'
    list_filter = ['author', 'question']


admin.site.register(Profile)
admin.site.register(Message, MessageView)
admin.site.register(Chapter)
admin.site.register(Topic)
admin.site.register(Question)
Листинг Б.3 - Модуль apps.py
from django.apps import AppConfig


class ForumConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'forum'

Листинг Б.4 - Модуль consumers.py
from channels.generic.websocket import AsyncWebsocketConsumer
import json
from channels.db import database_sync_to_async
from .models import Question

class QuestionConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_group_name = 'question_room'
        await self.channel_layer.group_add(self.room_group_name, self.channel_name)
        await self.accept()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)

    async def receive(self, text_data):
        text_data_json = json.loads(text_data)
        message_id = text_data_json['id']

        # Удаление сообщения из базы данных
        await self.delete_message(message_id)

        # Отправка сообщения об удалении всем клиентам
        await self.channel_layer.group_send(self.room_group_name, {
            'type': 'question_message',
            'id': message_id,
        })

    async def question_message(self, event):
        message_id = event['id']

        # Отправка данных об удалении клиентам
        await self.send(text_data=json.dumps({
            'id': message_id,
        }))
        
    @database_sync_to_async
    async def delete_message(self, id):
        # Здесь логика удаления сообщения из базы данных
        try: 
            Question.objects.get(pk=id).delete()
        except Question.DoesNotExist:
            pass
Листинг Б.5 - Модуль forms.py
from django import forms
from .models import *
from django.contrib.auth.forms import UserCreationForm

class UserForm(UserCreationForm):
    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2', 'first_name', 'last_name')

class ProfileForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ('phone_number', 'birth_date', 'vip_1', 'vip_2', 'vip_3', 'admin')

class MessageForm(forms.ModelForm):
    class Meta:
        model = Message
        fields = ('author', 'text', 'image', 'question')

Листинг Б.6 - Модуль models.py
from django.db import models
from django.contrib.auth.models import User
from django.dispatch import receiver
from django.db.models.signals import post_save

# Create your models here.

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    phone_number = models.CharField(max_length=12)
    birth_date = models.CharField(max_length=150)
    vip_1 = models.BooleanField(default=False)
    vip_2 = models.BooleanField(default=False)
    vip_3 = models.BooleanField(default=False)
    admin = models.BooleanField(default=False)

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

    def __str__(self):
        return f'{self.user.username}'
    
@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)

class Chapter(models.Model):
    title = models.CharField(max_length=50)
    icon_img = models.ImageField(default=False, upload_to='for_site/')
    discription = models.CharField(max_length=500)
    # topics = models.ManyToManyField('Topic')

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

    def __str__(self):
        return f'{self.title}'

class Topic(models.Model):
    title = models.CharField(max_length=50)
    image = models.URLField()
    discription = models.CharField(max_length=500)
    chapter = models.ManyToManyField(Chapter)

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

    def __str__(self):
        return f'{self.title}'
    
class Question(models.Model):
    text_question = models.CharField(max_length=70)
    topic = models.ManyToManyField(Topic)

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

    def __str__(self):
        return f'{self.text_question}'

class Message(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE, blank=True)
    text = models.CharField(max_length=500)
    time = models.DateTimeField(auto_now_add=True)
    image = models.ImageField(upload_to='messages/', blank=True)
    question = models.ForeignKey(Question, on_delete=models.CASCADE, blank=True)

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

    def __str__(self):
        return f'Profile: {self.author} | {self.question} | {self.text}'

class Views(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    question = models.ForeignKey(Question, on_delete=models.CASCADE)

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

    def __str__(self):
        return f'Views: {self.user}, {self.question}'
Листинг Б.7 - Модуль routing.py
from channels.routing import ProtocolTypeRouter, URLRouter
from django.urls import path
from .consumers import QuestionConsumer

websocket_urlpatterns = [
    path('ws/question/', QuestionConsumer.as_asgi()),
]
Листинг Б.8 - Модуль urls.py
from django.urls import path
from . import views
from django.contrib.auth import views as auth_views
from django.conf import settings
from django.conf.urls.static import static

#TODO: если пользователь не авторизован, то при любой попытке зайти на любую другую страницу сайта должно перекидывать на login форму
urlpatterns = [
    path('', views.main, name='main'),
    path('chapter_detail/<int:pk>', views.chapter_detail, name='chapter_detail'),
    path('topic_detail/<int:pk>', views.topic_detail, name='topic_detail'),
    path('question_detail/<int:pk>', views.question_detail, name='question_detail'),
    # path('delete_message/<int:pk_mess>/<int:pk_ques>', views.delete_message, name='delete_message'),

    #Регистрация
    path('login', views.login_view, name='login'),
    path('logout', views.logout_view, name='logout'),
    path('profile', views.profile, name='profile'),
    path('registration', views.registration, name='registration'),
    # path('update_profile', views.update_profile, name='update_profile'),
]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
Листинг Б.9 - Модуль views.py
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from .forms import *
from .models import *

# Create your views here.
@login_required(login_url='login')
def main(request):
    topics = Topic.objects.all()
    views = Views.objects.all()
    arr = []
    for topic in topics:
        arr.append(topic)
    for view in views:
        arr.append(view.question)
    # Создание словаря для подсчета повторений элементов
    counts = {}
    for item in arr:
        if item in counts:
            counts[item] += 1
        else:
            counts[item] = 1
    # Преобразование словаря в список кортежей
    topics_result = [[key, value] for key, value in counts.items()]
    topics_result = sorted(topics_result, key=lambda x: x[1], reverse=True)
    topics_result = [i[0] for i in topics_result]
    # return render(request, 'card/main.html', {'topics': topics_result, 'views': views})
    chapters = Chapter.objects.all()
    return render(request, 'card/main.html', {'chapters': chapters})

@login_required(login_url='login')
def chapter_detail(request, pk):
    chapter = get_object_or_404(Chapter, pk=pk)
    topics = Topic.objects.filter(chapter=chapter)
    return render(request, 'card/chapter_detail.html', {'topics': topics})

@login_required(login_url='login')
def topic_detail(request, pk):
    topic = get_object_or_404(Topic, pk=pk)
    questions = Question.objects.filter(topic=topic)
    return render(request, 'card/topic_detail.html', {'questions': questions})
    # return render(request, 'card/topic_detail.html', {'topic':topic, 'form': message_form, 'messages': messages})

@login_required(login_url='login')
def question_detail(request, pk):
    user = request.user
    # topic = get_object_or_404(Topic, pk=pk)
    question = get_object_or_404(Question, pk=pk)
    messages = Message.objects.filter(question=question)
    views = Views(user=request.user, question=get_object_or_404(Question, pk=pk))
    views.save()
    if request.method == 'POST':
        message_form = MessageForm(data=request.POST, files=request.FILES)
        if message_form.is_valid():
            message = message_form.save(commit=False)
            message.author = request.user  # Автоматически устанавливаем автора
            message.question = question         # и тему
            message.save()
            redirect('question_detail', pk)
        else:
            print(message_form.errors)
    else: 
        message_form = MessageForm()
    # return render(request, 'card/question_detail.html', {})
    return render(request, 'card/question_detail.html', {'question':question, 'form': message_form, 'messages': messages})

# def delete_message(request, pk_mess, pk_ques):
    # message = get_object_or_404(Message, pk=pk_mess)
    # question = get_object_or_404(Question, pk=pk_ques)
    # message.delete()
    # return redirect("{% url 'question_detail' pk=question.pk %}")
    # return render(request, "{% url 'card/question_detail.html' pk=question.pk %}", {})

#Регистрация
def login_view(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('main')  # Перенаправление на главную страницу
        else:
            # Возвращение сообщения об ошибке
            return render(request, 'auth/login.html', {'error': 'Неверное имя пользователя или пароль'})
    else:
        return render(request, 'auth/login.html', {})

def logout_view(request):
    logout(request)
    return render(request, 'auth/login.html', {})

def profile(request):
    return render(request, 'auth/profile.html', {})

def registration(request):
    if request.method == 'POST':
        user_form = UserForm(request.POST)
        profile_form = ProfileForm(request.POST)
        if user_form.is_valid() and profile_form.is_valid():
            user = user_form.save()

            # Сохранение данных пользователя
            profile = user.profile
            for field in profile_form.cleaned_data:
                setattr(profile, field, profile_form.cleaned_data[field])
            profile.save()  # то же самое что instance.profile.save() в сигналах

            login(request, user)
            return redirect('main')
        else:
            print(user_form.error_messages)
    else:
        user_form = UserForm()
        profile_form = ProfileForm()
    context = {
        user_form: user_form,
        profile_form: profile_form
    }
    return render(request, 'auth/registration.html', {})

# def update_profile(request):
#     if request.method == 'POST':
#         user_form = UserForm(request.POST, instance=request.user)
#         profile_form = ProfileForm(request.POST, instance=request.user.profile)
#         if profile_form.is_valid() and user_form.is_valid():  # Нужно вводить все параметры включая пороль
#             user_form.save()
#             profile_form.save()
#             # messages.success(request, _('Your profile was successfully updated!'))
#             print('Your profile was successfully updated!')
#             return redirect('main_list')
#         else:
#             # messages.error(request, _('Please correct the error below.'))
#             print('Please correct the error below.')
#     else:
#         user_form = UserForm(instance=request.user)
#         profile_form = ProfileForm(instance=request.user.profile)
#     return render(request, 'auth/update_profile.html', {
#         'user_form': user_form,
#         'profile_form': profile_form
#     })
Листинг Б.10 - Модуль asgi.py
"""
ASGI config for SettingsForum project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""
import os
import django
from django.core.asgi import get_asgi_application
from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
from forum.routing import websocket_urlpatterns

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sampleProject.settings') 
django.setup() 

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AuthMiddlewareStack(
        URLRouter(
            websocket_urlpatterns
        )
    ),
})

Листинг Б.11 - Модуль settings.py
"""
Django settings for SettingsForum project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-su_^=@o^h98d-bx4l#3(*(zv7x0naeb8(a+=y#!61!=n22=b0d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.pythonanywhere.com']

# For django-debug-toolbar
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

# Application definition

INSTALLED_APPS = [
    'channels',
    'forum',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar' # <== *django-debug-toolbar adding
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware', # <== *django-debug-toolbar adding
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SettingsForum.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SettingsForum.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/'

MEDIA_ROOT = f'{BASE_DIR}/media'
MEDIA_URL = '/media/'


ASGI_APPLICATION = 'SettingsForum.asgi.application'

# Конфигурация Channels
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}
Листинг Б.12 - Модуль urls.py
"""
URL configuration for SettingsForum project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('forum.urls')),
    path("__debug__/", include("debug_toolbar.urls")), # <== *django-debug-toolbar adding
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
 
Листинг Б.13 - Модуль wsgi.py
"""
WSGI config for SettingsForum project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SettingsForum.settings')

application = get_wsgi_application()

